{
	"info": {
		"_postman_id": "c2da1fd4-686c-4ab5-a529-1d66d172ce73",
		"name": "ZUKSES Complete API Collection - JWT Auth",
		"description": "Complete API Collection for ZUKSES e-commerce platform with JWT authentication. All endpoints use form-data format and automatic Bearer token management.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JWT Token Management Script",
									"pm.test(\"Status code is successful\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Extract and save JWT tokens",
									"try {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Handle different JWT response structures",
									"    if (responseJson.data) {",
									"        var data = responseJson.data;",
									"        ",
									"        // Save JWT token",
									"        if (data.access_token) {",
									"            pm.environment.set(\"auth_token\", data.access_token);",
									"            console.log(\"JWT Token saved to environment\");",
									"        } else if (data.token) {",
									"            pm.environment.set(\"auth_token\", data.token);",
									"            console.log(\"JWT Token saved to environment\");",
									"        }",
									"        ",
									"        // Save user information",
									"        if (data.user) {",
									"            pm.environment.set(\"current_user_id\", data.user.id);",
									"            pm.environment.set(\"current_user_email\", data.user.email || data.user.contact);",
									"            pm.environment.set(\"current_user_name\", data.user.name);",
									"        }",
									"        ",
									"        // Validate JWT structure",
									"        if (data.access_token || data.token) {",
									"            var token = data.access_token || data.token;",
									"            var tokenParts = token.split('.');",
									"            pm.test(\"Valid JWT structure\", function () {",
									"                pm.expect(tokenParts).to.have.lengthOf(3);",
									"            });",
									"            ",
									"            // Decode and validate payload",
									"            try {",
									"                var payload = JSON.parse(atob(tokenParts[1]));",
									"                pm.test(\"JWT contains user info\", function () {",
									"                    pm.expect(payload).to.have.property('sub');",
									"                });",
									"            } catch (e) {",
									"                console.log(\"Could not decode JWT payload\");",
									"            }",
									"        }",
									"        ",
									"        // Log token info",
									"        console.log(\"Auth successful, tokens saved\");",
									"        console.log(\"Token type:\", data.token_type || 'bearer');",
									"        console.log(\"Expires in:\", data.expires_in || 'unknown');",
									"    }",
									"} catch (e) {",
									"    console.log(\"Error processing JWT response:\", e.message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "contact",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JWT Token Management Script",
									"pm.test(\"Status code is successful\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Extract and save JWT tokens",
									"try {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Handle different JWT response structures",
									"    if (responseJson.data) {",
									"        var data = responseJson.data;",
									"        ",
									"        // Save JWT token",
									"        if (data.access_token) {",
									"            pm.environment.set(\"auth_token\", data.access_token);",
									"            console.log(\"JWT Token saved to environment\");",
									"        } else if (data.token) {",
									"            pm.environment.set(\"auth_token\", data.token);",
									"            console.log(\"JWT Token saved to environment\");",
									"        }",
									"        ",
									"        // Save user information",
									"        if (data.user) {",
									"            pm.environment.set(\"current_user_id\", data.user.id);",
									"            pm.environment.set(\"current_user_email\", data.user.email || data.user.contact);",
									"            pm.environment.set(\"current_user_name\", data.user.name);",
									"        }",
									"        ",
									"        // Validate JWT structure",
									"        if (data.access_token || data.token) {",
									"            var token = data.access_token || data.token;",
									"            var tokenParts = token.split('.');",
									"            pm.test(\"Valid JWT structure\", function () {",
									"                pm.expect(tokenParts).to.have.lengthOf(3);",
									"            });",
									"            ",
									"            // Decode and validate payload",
									"            try {",
									"                var payload = JSON.parse(atob(tokenParts[1]));",
									"                pm.test(\"JWT contains user info\", function () {",
									"                    pm.expect(payload).to.have.property('sub');",
									"                });",
									"            } catch (e) {",
									"                console.log(\"Could not decode JWT payload\");",
									"            }",
									"        }",
									"        ",
									"        // Log token info",
									"        console.log(\"Auth successful, tokens saved\");",
									"        console.log(\"Token type:\", data.token_type || 'bearer');",
									"        console.log(\"Expires in:\", data.expires_in || 'unknown');",
									"    }",
									"} catch (e) {",
									"    console.log(\"Error processing JWT response:\", e.message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "contact",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "otp_code",
									"value": "999999",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "contact",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "type",
									"value": "login",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/send-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"send-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "contact",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "contact",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "otp_code",
									"value": "123456",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/verify-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"verify-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "new_password",
									"value": "newpassword123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "new_password_confirmation",
									"value": "newpassword123",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Login Redirect",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"google"
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Login Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Cek jika respons berhasil",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Ambil token dari respons dan simpan di variabel",
									"var responseJson = pm.response.json();",
									"if(responseJson.data && responseJson.data.token) {",
									"    pm.environment.set(\"auth_token\", responseJson.data.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/google/callback?code=oauth_code_from_google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"google",
								"callback"
							],
							"query": [
								{
									"key": "code",
									"value": "oauth_code_from_google"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Logout cleanup script",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear all auth-related environment variables",
									"pm.environment.unset(\"auth_token\");",
									"pm.environment.unset(\"current_user_id\");",
									"pm.environment.unset(\"current_user_email\");",
									"pm.environment.unset(\"current_user_name\");",
									"pm.environment.unset(\"refresh_token\");",
									"",
									"console.log(\"All auth tokens cleared from environment\");",
									"",
									"// Verify token is cleared",
									"pm.test(\"Auth token cleared\", function () {",
									"    pm.expect(pm.environment.get(\"auth_token\")).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"description": "Endpoint untuk otentikasi pengguna, termasuk registrasi, login, logout, dan manajemen sesi"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "updateduser",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_depan",
									"value": "Updated",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_belakang",
									"value": "User",
									"type": "text",
									"disabled": false
								},
								{
									"key": "bio",
									"value": "This is my updated bio",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jenis_kelamin",
									"value": "LAKI_LAKI",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_lahir",
									"value": "1990-01-01",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "password123",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/delete-account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"delete-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Users (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New User (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "newuser",
									"type": "text",
									"disabled": false
								},
								{
									"key": "email",
									"value": "newuser@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_telepon",
									"value": "+6281234567890",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kata_sandi",
									"value": "password123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_user",
									"value": "PELANGGAN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_depan",
									"value": "New",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_belakang",
									"value": "User",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jenis_kelamin",
									"value": "LAKI_LAKI",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_lahir",
									"value": "1990-01-01",
									"type": "text",
									"disabled": false
								},
								{
									"key": "bio",
									"value": "New user bio",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "updateduser",
									"type": "text",
									"disabled": false
								},
								{
									"key": "email",
									"value": "updateduser@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_telepon",
									"value": "+6281234567890",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_user",
									"value": "PELANGGAN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_depan",
									"value": "Updated",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_belakang",
									"value": "User",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jenis_kelamin",
									"value": "LAKI_LAKI",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_lahir",
									"value": "1990-01-01",
									"type": "text",
									"disabled": false
								},
								{
									"key": "bio",
									"value": "Updated user bio",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen pengguna"
		},
		{
			"name": "Product Management",
			"item": [
				{
					"name": "List All Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text",
								"disabled": false
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama_produk",
									"value": "New Product",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi",
									"value": "Product description",
									"type": "text",
									"disabled": false
								},
								{
									"key": "harga",
									"value": "100000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "stok",
									"value": "10",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kategori_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "berat",
									"value": "500",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dimensi_panjang",
									"value": "10",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dimensi_lebar",
									"value": "5",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dimensi_tinggi",
									"value": "3",
									"type": "text",
									"disabled": false
								},
								{
									"key": "brand",
									"value": "Brand Name",
									"type": "text",
									"disabled": false
								},
								{
									"key": "sku",
									"value": "SKU123456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kondisi",
									"value": "BARU",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								},
								{
									"key": "foto_produk",
									"value": "['https://example.com/image1.jpg']",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kebijakan_pengembalian",
									"value": "Return policy",
									"type": "text",
									"disabled": false
								},
								{
									"key": "garansi",
									"value": "1 year warranty",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Product",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text",
								"disabled": false
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama_produk",
									"value": "Updated Product",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi",
									"value": "Updated product description",
									"type": "text",
									"disabled": false
								},
								{
									"key": "harga",
									"value": "150000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "stok",
									"value": "5",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kategori_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "berat",
									"value": "500",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dimensi_panjang",
									"value": "10",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dimensi_lebar",
									"value": "5",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dimensi_tinggi",
									"value": "3",
									"type": "text",
									"disabled": false
								},
								{
									"key": "brand",
									"value": "Updated Brand Name",
									"type": "text",
									"disabled": false
								},
								{
									"key": "sku",
									"value": "SKU123456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kondisi",
									"value": "BARU",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								},
								{
									"key": "foto_produk",
									"value": "['https://example.com/image1.jpg', 'https://example.com/image2.jpg']",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kebijakan_pengembalian",
									"value": "Updated return policy",
									"type": "text",
									"disabled": false
								},
								{
									"key": "garansi",
									"value": "2 years warranty",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Product Categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text",
								"disabled": false
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"categories"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Add Product Review",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rating",
									"value": "5",
									"type": "text",
									"disabled": false
								},
								{
									"key": "komentar",
									"value": "Great product!",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul",
									"value": "Excellent Quality",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/products/1/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"1",
								"reviews"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Product Reviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text",
								"disabled": false
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/1/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"1",
								"reviews"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Search Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text",
								"disabled": false
							}
						],
						"url": {
							"raw": "{{base_url}}/api/products/search?q=product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "product"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen produk"
		},
		{
			"name": "Seller Management",
			"item": [
				{
					"name": "List All Sellers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sellers?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sellers"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Seller",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_toko",
									"value": "New Shop",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_toko",
									"value": "Shop description",
									"type": "text",
									"disabled": false
								},
								{
									"key": "alamat_toko",
									"value": "Shop address",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_telepon_toko",
									"value": "+6281234567890",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_toko",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								},
								{
									"key": "rating",
									"value": "4.5",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_transaksi",
									"value": "10",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/sellers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sellers"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Seller",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sellers/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sellers",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Seller",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_toko",
									"value": "Updated Shop",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_toko",
									"value": "Updated shop description",
									"type": "text",
									"disabled": false
								},
								{
									"key": "alamat_toko",
									"value": "Updated shop address",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_telepon_toko",
									"value": "+6281234567890",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_toko",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								},
								{
									"key": "rating",
									"value": "4.8",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_transaksi",
									"value": "15",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/sellers/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sellers",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Seller",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sellers/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sellers",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen penjual"
		},
		{
			"name": "Device Management",
			"item": [
				{
					"name": "List All Devices",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/devices?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Device",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "device_id",
									"value": "device123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "device_name",
									"value": "User Device",
									"type": "text",
									"disabled": false
								},
								{
									"key": "operating_system",
									"value": "Android 12",
									"type": "text",
									"disabled": false
								},
								{
									"key": "app_version",
									"value": "1.0.0",
									"type": "text",
									"disabled": false
								},
								{
									"key": "push_token",
									"value": "push123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "adalah_device_terpercaya",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/devices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Device",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/devices/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Device",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "device_id",
									"value": "device123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "device_name",
									"value": "Updated Device",
									"type": "text",
									"disabled": false
								},
								{
									"key": "operating_system",
									"value": "Android 13",
									"type": "text",
									"disabled": false
								},
								{
									"key": "app_version",
									"value": "1.1.0",
									"type": "text",
									"disabled": false
								},
								{
									"key": "push_token",
									"value": "push456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "adalah_device_terpercaya",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/devices/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Device",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/devices/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Trust Device",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/devices/1/trust",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"1",
								"trust"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen perangkat pengguna"
		},
		{
			"name": "Verification Management",
			"item": [
				{
					"name": "List All Verifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/verifications?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"verifications"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Verification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jenis_verifikasi",
									"value": "EMAIL",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nilai_verifikasi",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kode_verifikasi",
									"value": "123456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kedaluwarsa_pada",
									"value": "2023-12-31 23:59:59",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/verifications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"verifications"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Verification",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/verifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"verifications",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Verification",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jenis_verifikasi",
									"value": "EMAIL",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nilai_verifikasi",
									"value": "user@example.com",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kode_verifikasi",
									"value": "654321",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kedaluwarsa_pada",
									"value": "2023-12-31 23:59:59",
									"type": "text",
									"disabled": false
								},
								{
									"key": "telah_digunakan",
									"value": "False",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/verifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"verifications",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Verification",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/verifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"verifications",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen verifikasi pengguna"
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "List All Sessions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sessions?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sessions"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Session",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "session123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "ip_address",
									"value": "192.168.1.1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_agent",
									"value": "Mozilla/5.0",
									"type": "text",
									"disabled": false
								},
								{
									"key": "payload",
									"value": "session_payload",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sessions"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Session",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sessions/session123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sessions",
								"session123"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Session",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "ip_address",
									"value": "192.168.1.2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_agent",
									"value": "Mozilla/5.0 Updated",
									"type": "text",
									"disabled": false
								},
								{
									"key": "payload",
									"value": "updated_session_payload",
									"type": "text",
									"disabled": false
								},
								{
									"key": "last_activity",
									"value": "1672531200",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/sessions/session123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sessions",
								"session123"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Session",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sessions/session123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sessions",
								"session123"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen sesi pengguna"
		},
		{
			"name": "Address & Location",
			"item": [
				{
					"name": "List All Addresses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/addresses?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"addresses"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Address",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "label_alamat",
									"value": "Home",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_penerima",
									"value": "John Doe",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_telepon_penerima",
									"value": "+6281234567890",
									"type": "text",
									"disabled": false
								},
								{
									"key": "alamat_lengkap",
									"value": "123 Main Street",
									"type": "text",
									"disabled": false
								},
								{
									"key": "provinsi_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kota_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kecamatan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kode_pos_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "catatan_pengiriman",
									"value": "Please deliver after 5 PM",
									"type": "text",
									"disabled": false
								},
								{
									"key": "is_primary",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/addresses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"addresses"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Address",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/addresses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"addresses",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Address",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "label_alamat",
									"value": "Office",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_penerima",
									"value": "John Doe",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_telepon_penerima",
									"value": "+6281234567890",
									"type": "text",
									"disabled": false
								},
								{
									"key": "alamat_lengkap",
									"value": "456 Office Street",
									"type": "text",
									"disabled": false
								},
								{
									"key": "provinsi_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kota_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kecamatan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kode_pos_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "catatan_pengiriman",
									"value": "Please deliver during business hours",
									"type": "text",
									"disabled": false
								},
								{
									"key": "is_primary",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/addresses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"addresses",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Address",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/addresses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"addresses",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Provinces",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/provinces?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"provinces"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Province",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama",
									"value": "West Java",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/provinces",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"provinces"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Province",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/provinces/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"provinces",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Province",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama",
									"value": "East Java",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/provinces/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"provinces",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Province",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/provinces/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"provinces",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Cities",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cities?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cities"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New City",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "provinsi_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama",
									"value": "Bandung",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/cities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cities"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific City",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cities",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update City",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "provinsi_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama",
									"value": "Jakarta",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/cities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cities",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete City",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cities",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Districts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/districts?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"districts"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New District",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kota_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama",
									"value": "Central Jakarta",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/districts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"districts"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific District",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/districts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"districts",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update District",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kota_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama",
									"value": "South Jakarta",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/districts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"districts",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete District",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/districts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"districts",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Postal Codes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/postal-codes?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"postal-codes"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Postal Code",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kecamatan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kode",
									"value": "12345",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/postal-codes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"postal-codes"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Postal Code",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/postal-codes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"postal-codes",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Postal Code",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kecamatan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kode",
									"value": "54321",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/postal-codes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"postal-codes",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Postal Code",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/postal-codes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"postal-codes",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen alamat dan lokasi"
		},
		{
			"name": "Shopping & Order",
			"item": [
				{
					"name": "List All Carts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/carts?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"carts"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "session_id",
									"value": "session123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_seller",
									"value": "1",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"carts"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Cart",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"carts",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Cart",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "session_id",
									"value": "session456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_seller",
									"value": "1",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"carts",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Cart",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"carts",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Cart Items",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cart-items?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart-items"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Cart Item",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_cart",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_produk",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_harga_varian",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah",
									"value": "2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "catatan",
									"value": "Please pack carefully",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/cart-items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart-items"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Cart Item",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cart-items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart-items",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Cart Item",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_cart",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_produk",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_harga_varian",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah",
									"value": "3",
									"type": "text",
									"disabled": false
								},
								{
									"key": "catatan",
									"value": "Please pack with extra care",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/cart-items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart-items",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Cart Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/cart-items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cart-items",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Order",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nomor_pesanan",
									"value": "ORD-001",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_customer",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_alamat_pengiriman",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "total_harga",
									"value": "500000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_item",
									"value": "2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pesanan",
									"value": "DIPROSES",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_pesanan",
									"value": "2023-01-01 10:00:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Order",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Order",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nomor_pesanan",
									"value": "ORD-001",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_customer",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_alamat_pengiriman",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "total_harga",
									"value": "550000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_item",
									"value": "2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pesanan",
									"value": "DIKIRIM",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_pesanan",
									"value": "2023-01-01 10:00:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/orders/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Order",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/orders/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Order Items",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/order-items?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Order Item",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_pesanan",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_seller",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_produk",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_harga_varian",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah",
									"value": "2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "harga_satuan",
									"value": "250000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "subtotal",
									"value": "500000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "catatan",
									"value": "Please pack carefully",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/order-items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Order Item",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/order-items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Order Item",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_pesanan",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_seller",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_produk",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_harga_varian",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah",
									"value": "3",
									"type": "text",
									"disabled": false
								},
								{
									"key": "harga_satuan",
									"value": "250000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "subtotal",
									"value": "750000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "catatan",
									"value": "Please pack with extra care",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/order-items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Order Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/order-items/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen keranjang belanja dan pesanan"
		},
		{
			"name": "Payment & Shipping",
			"item": [
				{
					"name": "List All Shipping Methods",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/shipping-methods?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-methods"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Shipping Method",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama_kurir",
									"value": "JNE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_layanan",
									"value": "REG",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_layanan",
									"value": "Regular Service",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_dasar",
									"value": "10000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "estimasi_pengiriman",
									"value": "2-3 hari",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/shipping-methods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-methods"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Shipping Method",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/shipping-methods/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-methods",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Shipping Method",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama_kurir",
									"value": "JNT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_layanan",
									"value": "YES",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_layanan",
									"value": "Yakin Esok Sampai",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_dasar",
									"value": "15000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "estimasi_pengiriman",
									"value": "1 hari",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/shipping-methods/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-methods",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Shipping Method",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/shipping-methods/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-methods",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Shipping Rates",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/shipping-rates?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-rates"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Shipping Rate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_kurir",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_kota_asal",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_kota_tujuan",
									"value": "2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_pengiriman",
									"value": "20000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "estimasi_hari",
									"value": "2",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/shipping-rates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-rates"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Shipping Rate",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/shipping-rates/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-rates",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Shipping Rate",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_kurir",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_kota_asal",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_kota_tujuan",
									"value": "2",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_pengiriman",
									"value": "25000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "estimasi_hari",
									"value": "3",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/shipping-rates/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-rates",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Shipping Rate",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/shipping-rates/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"shipping-rates",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Order Shipping",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/order-shipping?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-shipping"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Order Shipping",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_pesanan",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_kurir",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_kurir",
									"value": "JNE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "layanan_kurir",
									"value": "REG",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_pengiriman",
									"value": "20000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "estimasi_pengiriman",
									"value": "2-3 hari",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/order-shipping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-shipping"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Order Shipping",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/order-shipping/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-shipping",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Order Shipping",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_pesanan",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_kurir",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_kurir",
									"value": "JNT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "layanan_kurir",
									"value": "YES",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_pengiriman",
									"value": "25000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "estimasi_pengiriman",
									"value": "1 hari",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nomor_resi",
									"value": "JNT123456789",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pengiriman",
									"value": "DIKIRIM",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/order-shipping/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-shipping",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Order Shipping",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/order-shipping/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-shipping",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Payment Methods",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-methods?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-methods"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Payment Method",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama_pembayaran",
									"value": "Bank Transfer",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pembayaran",
									"value": "TRANSFER_BANK",
									"type": "text",
									"disabled": false
								},
								{
									"key": "provider_pembayaran",
									"value": "BCA",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_pembayaran",
									"value": "Transfer via BCA Bank",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_transaksi",
									"value": "5000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pembayaran",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/payment-methods",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-methods"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Payment Method",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-methods/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-methods",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Payment Method",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama_pembayaran",
									"value": "Credit Card",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pembayaran",
									"value": "CREDIT_CARD",
									"type": "text",
									"disabled": false
								},
								{
									"key": "provider_pembayaran",
									"value": "Visa/Mastercard",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_pembayaran",
									"value": "Pay with Visa or Mastercard",
									"type": "text",
									"disabled": false
								},
								{
									"key": "biaya_transaksi",
									"value": "3000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pembayaran",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/payment-methods/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-methods",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Payment Method",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-methods/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-methods",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Payment Transactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-transactions?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-transactions"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Payment Transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_pesanan",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_metode_pembayaran",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "referensi_id",
									"value": "REF123456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_pembayaran",
									"value": "500000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_transaksi",
									"value": "PENDING",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_transaksi",
									"value": "2023-01-01 10:00:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/payment-transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-transactions"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Payment Transaction",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-transactions/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-transactions",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Payment Transaction",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_pesanan",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_metode_pembayaran",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "referensi_id",
									"value": "REF123456",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_pembayaran",
									"value": "500000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_transaksi",
									"value": "SUCCESS",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggal_transaksi",
									"value": "2023-01-01 10:00:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/payment-transactions/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-transactions",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Payment Transaction",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-transactions/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-transactions",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Payment Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-logs?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-logs"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Payment Log",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_transaksi_pembayaran",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_log",
									"value": "REQUEST",
									"type": "text",
									"disabled": false
								},
								{
									"key": "konten_log",
									"value": "Payment request initiated",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/payment-logs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-logs"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Payment Log",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-logs/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-logs",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Payment Log",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_transaksi_pembayaran",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_log",
									"value": "RESPONSE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "konten_log",
									"value": "Payment response received",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/payment-logs/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-logs",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Payment Log",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payment-logs/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payment-logs",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen pembayaran dan pengiriman"
		},
		{
			"name": "Review & Feedback",
			"item": [
				{
					"name": "List All Product Reviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/product-reviews?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"product-reviews"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Product Review",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_produk",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_harga_varian",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_pembeli",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "rating",
									"value": "5",
									"type": "text",
									"disabled": false
								},
								{
									"key": "komentar",
									"value": "Great product!",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul",
									"value": "Excellent Quality",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_ulasan",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/product-reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"product-reviews"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Product Review",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/product-reviews/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"product-reviews",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Product Review",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_produk",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_harga_varian",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_pembeli",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "rating",
									"value": "4",
									"type": "text",
									"disabled": false
								},
								{
									"key": "komentar",
									"value": "Good product!",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul",
									"value": "Good Quality",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_ulasan",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/product-reviews/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"product-reviews",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Product Review",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/product-reviews/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"product-reviews",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Review Media",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/review-media?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-media"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Review Media",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_review",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_media",
									"value": "GAMBAR",
									"type": "text",
									"disabled": false
								},
								{
									"key": "url_media",
									"value": "https://example.com/image.jpg",
									"type": "text",
									"disabled": false
								},
								{
									"key": "urutan",
									"value": "1",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/review-media",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-media"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Review Media",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/review-media/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-media",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Review Media",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_review",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_media",
									"value": "VIDEO",
									"type": "text",
									"disabled": false
								},
								{
									"key": "url_media",
									"value": "https://example.com/video.mp4",
									"type": "text",
									"disabled": false
								},
								{
									"key": "urutan",
									"value": "2",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/review-media/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-media",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Review Media",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/review-media/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-media",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Review Votes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/review-votes?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-votes"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Review Vote",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_review",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_vote",
									"value": "SUKA",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/review-votes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-votes"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Review Vote",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/review-votes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-votes",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Review Vote",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_review",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_vote",
									"value": "TIDAK_SUKA",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/review-votes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-votes",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Review Vote",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/review-votes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"review-votes",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen ulasan dan umpan balik"
		},
		{
			"name": "Notification & Activity",
			"item": [
				{
					"name": "List All Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_notifikasi",
									"value": "PESANAN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul_notifikasi",
									"value": "Order Confirmation",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_notifikasi",
									"value": "Your order has been confirmed",
									"type": "text",
									"disabled": false
								},
								{
									"key": "link_notifikasi",
									"value": "https://example.com/order/1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_dibaca",
									"value": "False",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/notifications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Notification",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Notification",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_notifikasi",
									"value": "PEMBAYARAN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul_notifikasi",
									"value": "Payment Confirmation",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_notifikasi",
									"value": "Your payment has been confirmed",
									"type": "text",
									"disabled": false
								},
								{
									"key": "link_notifikasi",
									"value": "https://example.com/payment/1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_dibaca",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Notification",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Activities",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/activities?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"activities"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "sesi_id",
									"value": "session123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_aktivitas",
									"value": "LOGIN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_aktivitas",
									"value": "User logged in",
									"type": "text",
									"disabled": false
								},
								{
									"key": "ip_address",
									"value": "192.168.1.1",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/activities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"activities"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Activity",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/activities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"activities",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Activity",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "sesi_id",
									"value": "session123",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_aktivitas",
									"value": "LOGOUT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_aktivitas",
									"value": "User logged out",
									"type": "text",
									"disabled": false
								},
								{
									"key": "ip_address",
									"value": "192.168.1.1",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/activities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"activities",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Activity",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/activities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"activities",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Search History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/search-history?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"search-history"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Search History",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kata_pencarian",
									"value": "smartphone",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_hasil",
									"value": "10",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pencarian",
									"value": "PRODUK",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/search-history",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"search-history"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Search History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/search-history/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"search-history",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Search History",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "kata_pencarian",
									"value": "laptop",
									"type": "text",
									"disabled": false
								},
								{
									"key": "jumlah_hasil",
									"value": "15",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pencarian",
									"value": "PRODUK",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/search-history/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"search-history",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Search History",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/search-history/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"search-history",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen notifikasi dan aktivitas pengguna"
		},
		{
			"name": "Admin & Reporting",
			"item": [
				{
					"name": "List All Admin Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin-users?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin-users"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Admin User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "role_admin",
									"value": "ADMIN_CONTENT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "permissions",
									"value": "{\"can_create_product\": true, \"can_edit_product\": true}",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/admin-users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin-users"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Admin User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin-users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin-users",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Admin User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_user",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "role_admin",
									"value": "ADMIN_FINANCE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "permissions",
									"value": "{\"can_manage_payments\": true, \"can_view_reports\": true}",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/admin-users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin-users",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Admin User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin-users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin-users",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Seller Reports",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/seller-reports?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"seller-reports"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Seller Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_seller",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_laporan",
									"value": "MINGGUAN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "periode_laporan",
									"value": "2023-01-01",
									"type": "text",
									"disabled": false
								},
								{
									"key": "data_laporan",
									"value": "{\"total_sales\": 1000000, \"total_orders\": 10}",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/seller-reports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"seller-reports"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Seller Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/seller-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"seller-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Seller Report",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_seller",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_laporan",
									"value": "BULANAN",
									"type": "text",
									"disabled": false
								},
								{
									"key": "periode_laporan",
									"value": "2023-01-01",
									"type": "text",
									"disabled": false
								},
								{
									"key": "data_laporan",
									"value": "{\"total_sales\": 2000000, \"total_orders\": 20}",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/seller-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"seller-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Seller Report",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/seller-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"seller-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Sales Reports",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sales-reports?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sales-reports"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Sales Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tipe_laporan",
									"value": "GLOBAL",
									"type": "text",
									"disabled": false
								},
								{
									"key": "periode_laporan",
									"value": "2023-01-01",
									"type": "text",
									"disabled": false
								},
								{
									"key": "data_laporan",
									"value": "{\"total_revenue\": 10000000, \"total_orders\": 100}",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/sales-reports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sales-reports"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Sales Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sales-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sales-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Sales Report",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tipe_laporan\": \"KATEGORI\",\n    \"periode_laporan\": \"2023-01-01\",\n    \"data_laporan\": \"{\\\"category_sales\\\": [{\\\"category_id\\\": 1, \\\"revenue\\\": 5000000, \\\"orders\\\": 50}]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/sales-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sales-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Sales Report",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/sales-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sales-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk manajemen admin dan pelaporan"
		},
		{
			"name": "Chat System",
			"item": [
				{
					"name": "List All Chat Conversations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-conversations?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-conversations"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Chat Conversation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tipe",
									"value": "PRIVATE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul",
									"value": "Private Chat",
									"type": "text",
									"disabled": false
								},
								{
									"key": "owner_user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi",
									"value": "Private conversation",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-conversations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-conversations"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Chat Conversation",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-conversations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-conversations",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Chat Conversation",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tipe",
									"value": "GROUP",
									"type": "text",
									"disabled": false
								},
								{
									"key": "judul",
									"value": "Group Chat",
									"type": "text",
									"disabled": false
								},
								{
									"key": "owner_user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi",
									"value": "Group conversation",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-conversations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-conversations",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Chat Conversation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-conversations/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-conversations",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Chat Participants",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-participants?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-participants"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Chat Participant",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "percakapan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "shop_profile_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_partisipan",
									"value": "AKTIF",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-participants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-participants"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Chat Participant",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-participants/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-participants",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Chat Participant",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "percakapan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "shop_profile_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_partisipan",
									"value": "BLOCKED",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-participants/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-participants",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Chat Participant",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-participants/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-participants",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Chat Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-messages?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-messages"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Chat Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "percakapan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "pengirim_user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "pengirim_shop_profile_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_pesan",
									"value": "Hello, how can I help you?",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pesan",
									"value": "TEXT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pesan",
									"value": "TERKIRIM",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-messages"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Chat Message",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-messages/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-messages",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Chat Message",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "percakapan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "pengirim_user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "pengirim_shop_profile_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_pesan",
									"value": "Hello, how can I assist you today?",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pesan",
									"value": "TEXT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_pesan",
									"value": "DITERIMA",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-messages/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-messages",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Chat Message",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-messages/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-messages",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Message Statuses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-statuses?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-statuses"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Message Status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status",
									"value": "DIBACA",
									"type": "text",
									"disabled": false
								},
								{
									"key": "timestamp_status",
									"value": "2023-01-01 10:00:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-statuses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-statuses"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Message Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-statuses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-statuses",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Message Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status",
									"value": "DITERIMA",
									"type": "text",
									"disabled": false
								},
								{
									"key": "timestamp_status",
									"value": "2023-01-01 09:30:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-statuses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-statuses",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Message Status",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-statuses/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-statuses",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Message Reactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-reactions?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-reactions"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Message Reaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "reaksi",
									"value": "LIKE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "timestamp_reaksi",
									"value": "2023-01-01 10:00:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-reactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-reactions"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Message Reaction",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-reactions/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-reactions",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Message Reaction",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "reaksi",
									"value": "LOVE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "timestamp_reaksi",
									"value": "2023-01-01 10:05:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-reactions/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-reactions",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Message Reaction",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-reactions/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-reactions",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Message Edits",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-edits?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-edits"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Message Edit",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "editor_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_sebelumnya",
									"value": "Hello, how can I help you?",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_baru",
									"value": "Hi, how can I assist you today?",
									"type": "text",
									"disabled": false
								},
								{
									"key": "timestamp_edit",
									"value": "2023-01-01 10:05:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-edits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-edits"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Message Edit",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-edits/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-edits",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Message Edit",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "editor_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_sebelumnya",
									"value": "Hi, how can I assist you today?",
									"type": "text",
									"disabled": false
								},
								{
									"key": "isi_baru",
									"value": "Hello, how may I help you?",
									"type": "text",
									"disabled": false
								},
								{
									"key": "timestamp_edit",
									"value": "2023-01-01 10:10:00",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-edits/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-edits",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Message Edit",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-edits/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-edits",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Message Attachments",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-attachments?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-attachments"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Message Attachment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_lampiran",
									"value": "IMAGE",
									"type": "text",
									"disabled": false
								},
								{
									"key": "url_lampiran",
									"value": "https://example.com/image.jpg",
									"type": "text",
									"disabled": false
								},
								{
									"key": "ukuran_lampiran",
									"value": "102400",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_file",
									"value": "image.jpg",
									"type": "text",
									"disabled": false
								},
								{
									"key": "mime_type",
									"value": "image/jpeg",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-attachments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-attachments"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Message Attachment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-attachments/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-attachments",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Message Attachment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_lampiran",
									"value": "VIDEO",
									"type": "text",
									"disabled": false
								},
								{
									"key": "url_lampiran",
									"value": "https://example.com/video.mp4",
									"type": "text",
									"disabled": false
								},
								{
									"key": "ukuran_lampiran",
									"value": "1024000",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nama_file",
									"value": "video.mp4",
									"type": "text",
									"disabled": false
								},
								{
									"key": "mime_type",
									"value": "video/mp4",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/message-attachments/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-attachments",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Message Attachment",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-attachments/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-attachments",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Chat Product References",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-product-references?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-product-references"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Chat Product Reference",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "produk_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_mulai",
									"value": "10",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_akhir",
									"value": "20",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-product-references",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-product-references"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Chat Product Reference",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-product-references/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-product-references",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Chat Product Reference",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "produk_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_mulai",
									"value": "15",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_akhir",
									"value": "25",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-product-references/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-product-references",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Chat Product Reference",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-product-references/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-product-references",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Chat Order References",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-order-references?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-order-references"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Chat Order Reference",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "order_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_mulai",
									"value": "10",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_akhir",
									"value": "20",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-order-references",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-order-references"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Chat Order Reference",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-order-references/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-order-references",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Chat Order Reference",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pesan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "order_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_mulai",
									"value": "15",
									"type": "text",
									"disabled": false
								},
								{
									"key": "posisi_akhir",
									"value": "25",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-order-references/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-order-references",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Chat Order Reference",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-order-references/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-order-references",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Chat Reports",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-reports?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-reports"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New Chat Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "percakapan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "reporter_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "alasan",
									"value": "Inappropriate content",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_laporan",
									"value": "INAPPROPRIATE_CONTENT",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_laporan",
									"value": "PENDING",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggapan_admin",
									"value": "Under review",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-reports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-reports"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Chat Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Chat Report",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "percakapan_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "reporter_id",
									"value": "1",
									"type": "text",
									"disabled": false
								},
								{
									"key": "alasan",
									"value": "Spam content",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_laporan",
									"value": "SPAM",
									"type": "text",
									"disabled": false
								},
								{
									"key": "status_laporan",
									"value": "RESOLVED",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tanggapan_admin",
									"value": "Report resolved",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/chat-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete Chat Report",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/chat-reports/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"chat-reports",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk sistem chat"
		},
		{
			"name": "System Settings",
			"item": [
				{
					"name": "List All System Settings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/system-settings?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"system-settings"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create New System Setting",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kunci_pengaturan",
									"value": "site_title",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nilai_pengaturan",
									"value": "ZUKSES E-commerce",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pengaturan",
									"value": "STRING",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_pengaturan",
									"value": "Site title setting",
									"type": "text",
									"disabled": false
								},
								{
									"key": "grup_pengaturan",
									"value": "GENERAL",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dapat_diubah",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/system-settings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"system-settings"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific System Setting",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/system-settings/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"system-settings",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update System Setting",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "kunci_pengaturan",
									"value": "site_title",
									"type": "text",
									"disabled": false
								},
								{
									"key": "nilai_pengaturan",
									"value": "ZUKSES Marketplace",
									"type": "text",
									"disabled": false
								},
								{
									"key": "tipe_pengaturan",
									"value": "STRING",
									"type": "text",
									"disabled": false
								},
								{
									"key": "deskripsi_pengaturan",
									"value": "Updated site title setting",
									"type": "text",
									"disabled": false
								},
								{
									"key": "grup_pengaturan",
									"value": "GENERAL",
									"type": "text",
									"disabled": false
								},
								{
									"key": "dapat_diubah",
									"value": "True",
									"type": "text",
									"disabled": false
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/system-settings/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"system-settings",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete System Setting",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/system-settings/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"system-settings",
								"1"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Authentication validation",
									"pm.test(\"Valid JWT token present\", function () {",
									"    var token = pm.environment.get(\"auth_token\");",
									"    pm.expect(token).to.not.be.undefined;",
									"    pm.expect(token).to.not.be.empty;",
									"});",
									"",
									"// Validate response doesn't indicate auth error",
									"pm.test(\"No authentication error\", function () {",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Check for common auth error patterns",
									"    if (responseJson.message) {",
									"        var errorPatterns = ['unauthorized', 'invalid token', 'token expired', 'authentication failed'];",
									"        var message = responseJson.message.toLowerCase();",
									"        ",
									"        errorPatterns.forEach(function(pattern) {",
									"            pm.expect(message).to.not.include(pattern);",
									"        });",
									"    }",
									"});",
									"",
									"// Log auth status",
									"console.log(\"Request authenticated with JWT token\");"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoint untuk pengaturan sistem"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "URL dasar aplikasi ZUKSES"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string",
			"description": "Token otentikasi pengguna"
		},
		{
			"key": "current_user_id",
			"value": "",
			"type": "string",
			"description": "ID of the currently authenticated user"
		},
		{
			"key": "current_user_email",
			"value": "",
			"type": "string",
			"description": "Email of the currently authenticated user"
		},
		{
			"key": "current_user_name",
			"value": "",
			"type": "string",
			"description": "Name of the currently authenticated user"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string",
			"description": "JWT refresh token for token renewal"
		}
	]
}